{
  "name": "Ishido---a-board-game",
  "tagline": "An Android board game application that can be played against computer where the computer uses mimax search with/without alpha beta pruning to make the move",
  "body": "# Ishido\r\nTwo players play the game - the human user and the computer.\r\nEach player (human user and computer) is dealt a tile with which to play his/her turn. The board consists of 96 squares, arranged in 8 rows X 12 columns.\r\n\r\n# Rules\r\nThey may not place the tile adjacent to (left/right/above/below) another tile unless either the color or the symbol of the two tiles match. If the tile does not match any tile already on the board, it must be placed in a square not adjacent to any other tile on the board.\r\nThe player earns as many points as the number of adjacent tiles with which his/her tile matches. Note that that number of points could be 0 (no match) to 4 (the tile matches the tiles to the left, right, above and below it.)\r\nThe game ends when all the tiles have been placed on the board, or when a player cannot place a tile anywhere on the board without violating the rules of the game. The player with the highest score is said to win the game.\r\n\r\n# Implementation\r\nTwo players play the game - the human user and the computer.\r\nWhen a fresh game is started, the first player is determined using a coin toss. The human player is asked to call the coin toss - head or tail. If the human player calls correctly, the player plays first. Otherwise, the computer plays first.\r\nOn his/her turn, each player plays the next tile on top of the stock.\r\nThe computer plays to win. In order to do so, it uses minimax, with or without alpha-beta pruning (to the selected ply) to determine its next move.\r\nHuman player should be able to ask for help from your program on each move. When asked, the program uses its own algorithm to suggest the best next move for the human player.\r\nThe program is able to both load a game from a text file and save a game to a text file.\r\nThe program \r\nThe format for serialization is as follows:\r\n00 00 00 00 00 00 00 00 00 00 00 00\r\n00 00 00 00 00 00 00 00 00 00 00 00\r\n00 00 00 00 00 00 00 00 00 00 00 00\r\n00 00 00 00 12 13 00 00 00 00 00 00\r\n00 00 00 00 13 23 00 00 00 00 00 00\r\n00 00 00 00 00 00 00 00 00 00 00 00\r\n00 00 00 00 00 00 00 00 00 00 00 00\r\n00 00 00 00 00 00 00 00 00 00 00 00\r\n\r\nStock:\r\n11 23 32 44 45 62 35 43 ...\r\n\r\nHuman Score:\r\n3\r\n\r\nComputer Score:\r\n5\r\n\r\nNext Player:\r\nHuman\r\nThe above state corresponds to a board of 8 rows and 12 columns, with 4 tiles placed on it. Each tile is represented by 2 numbers [1..6][1..6]: The first number specifies the color (one of 6) and the second number specifies the shape (1 of 6). You can use any 6 colors and shapes as long as you consistently map each first number to the same color and each second number to the same shape. \r\nThe stock contains the tiles in order: the first tile (11) is at the top of the stock. The score of the player so far is also listed (3).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}